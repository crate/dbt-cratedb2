[project]
dynamic = ["version"]
name = "dbt-cratedb2"
description = "dbt adapter for CrateDB 5.x, derived from dbt-postgres"
readme = "README.md"
keywords = ["dbt", "adapter", "cratedb", "adapters", "database", "elt", "dbt-core", "dbt-adapter", "postgresql"]
requires-python = ">=3.9.0"
authors = [
    { name = "Crate.io", email = "office@crate.io" },
]
maintainers = [
    { name = "Crate.io", email = "office@crate.io" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "psycopg2-binary>=2.9,<3.0",
    "dbt-adapters>=1.7.0,<2.0",
    # add dbt-core to ensure backwards compatibility of installation, this is not a functional dependency
    "dbt-core>=1.9.0b4",
    # installed via dbt-adapters but used directly
    "dbt-common>=1.0.4,<2.0",
    "dbt-postgres>=1.9.0b1",
    "agate>=1.0,<2.0",
    "sqlparse<0.6",
    "sql-metadata<3",
]
[project.urls]
Homepage = "https://github.com/crate-workbench/dbt-cratedb2"
Documentation = "https://dbt-cratedb2.readthedocs.io/"
Repository = "https://github.com/crate-workbench/dbt-cratedb2.git"
Issues = "https://github.com/crate-workbench/dbt-cratedb2/issues"
Changelog = "https://github.com/crate-workbench/dbt-cratedb2/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["dbt"]

[tool.hatch.build.targets.wheel]
packages = ["dbt"]

[tool.hatch.version]
path = "dbt/adapters/cratedb/__version__.py"

[tool.hatch.envs.default]
dependencies = [
    "dbt-adapters @ git+https://github.com/dbt-labs/dbt-adapters.git",
    "dbt-common @ git+https://github.com/dbt-labs/dbt-common.git",
    "dbt-tests-adapter @ git+https://github.com/dbt-labs/dbt-adapters.git#subdirectory=dbt-tests-adapter",
    "dbt-core @ git+https://github.com/dbt-labs/dbt-core.git#subdirectory=core",
    "pre-commit==3.7.0",
    "freezegun",
    "pytest",
    "pytest-dotenv",
    "pytest-mock",
    "pytest-xdist",
]
[tool.hatch.envs.default.env-vars]
DBT_TEST_USER_1 = "dbt_test_user_1"
DBT_TEST_USER_2 = "dbt_test_user_2"
DBT_TEST_USER_3 = "dbt_test_user_3"
[tool.hatch.envs.default.scripts]
setup = "pre-commit install"
code-quality = "pre-commit run --all-files"
unit-tests = "python -m pytest -vvv {args:tests/unit}"
integration-tests = "python -m pytest -vvv {args:tests/functional}"
docker-dev = [
    "echo Does not support integration testing, only development and unit testing. See issue https://github.com/dbt-labs/dbt-postgres/issues/99",
	"docker build -f docker/dev.Dockerfile -t dbt-cratedb2-dev .",
	"docker run --rm -it --name dbt-cratedb2-dev -v $(pwd):/opt/code dbt-cratedb2-dev",
]
docker-prod = "docker build -f docker/Dockerfile -t dbt-cratedb2 ."

[tool.hatch.envs.build]
detached = true
dependencies = [
    "wheel",
    "twine",
    "check-wheel-contents",
]
[tool.hatch.envs.build.scripts]
check-all = [
    "- check-wheel",
    "- check-sdist",
]
check-wheel = [
    "twine check dist/*",
    "find ./dist/dbt_cratedb2-*.whl -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/",
    "pip freeze | grep dbt-cratedb2",
]
check-sdist = [
    "check-wheel-contents dist/*.whl --ignore W007,W008",
    "find ./dist/dbt_cratedb2-*.gz -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/",
    "pip freeze | grep dbt-cratedb2",
]

[tool.black]
line-length = 99

[tool.flake8]
ignore = ["E203", "E501", "E741", "W503", "W504"]
max-line-length = 99
per-file-ignores = [
    "*/__init__.py:F401",
    "tests/functional/materializations/materialized_view_tests/utils.py:E201,E202",
]
select = ["E", "F", "W"]

[tool.mypy]
explicit_package_bases = true
ignore_missing_imports = true
install_types = true
non_interactive = true
pretty = true
show_error_codes = true

[tool.pytest]
env_files = ["test.env"]

[tool.pytest.ini_options]
# FIXME: Make all test cases succeed, or specifically ignore individual ones.
addopts = """
    -rfEXs -p pytester --strict-markers --verbosity=3
    --ignore-glob=tests/functional/adapter/persist_docs/*
    --ignore-glob=tests/functional/adapter/test_caching.py
    --ignore-glob=tests/functional/adapter/test_clone.py
    --ignore-glob=tests/functional/adapter/test_concurrency.py
    --ignore-glob=tests/functional/adapter/test_constraints.py
    --ignore-glob=tests/functional/adapter/test_empty.py
    --ignore-glob=tests/functional/adapter/test_ephemeral.py
    --ignore-glob=tests/functional/adapter/test_data_types.py
    --ignore-glob=tests/functional/adapter/test_grants.py
    --ignore-glob=tests/functional/adapter/test_incremental.py
    --ignore-glob=tests/functional/adapter/test_incremental_microbatch.py
    --ignore-glob=tests/functional/adapter/test_persist_docs.py
    --ignore-glob=tests/functional/adapter/test_relations.py
    --ignore-glob=tests/functional/adapter/test_show.py
    --ignore-glob=tests/functional/adapter/test_simple_copy.py
    --ignore-glob=tests/functional/adapter/test_simple_seed/*
    --ignore-glob=tests/functional/adapter/test_simple_snapshot.py
    --ignore-glob=tests/functional/adapter/test_store_test_failures.py
    --ignore-glob=tests/functional/adapter/test_unit_testing.py
    --ignore-glob=tests/functional/adapter/test_utils.py
    --ignore-glob=tests/functional/contracts/*
    --ignore-glob=tests/functional/custom_singular_tests/*
    --ignore-glob=tests/functional/exit_codes/*
    --ignore-glob=tests/functional/exposures/*
    --ignore-glob=tests/functional/graph_selection/*
    --ignore-glob=tests/functional/incremental_schema_tests/*
    --ignore-glob=tests/functional/materializations/*
    --ignore-glob=tests/functional/postgres/*
    --ignore-glob=tests/functional/retry/*
    --ignore-glob=tests/functional/run_operations/*
    --ignore-glob=tests/functional/schema/*
    --ignore-glob=tests/functional/selected_resources/*
    --ignore-glob=tests/functional/semantic_models/*
    --ignore-glob=tests/functional/show/*
    --ignore-glob=tests/functional/sources/test_simple_source.py
    --ignore-glob=tests/functional/statements/*
    --ignore-glob=tests/functional/test_catalog.py
    --ignore-glob=tests/functional/test_column_quotes.py
    --ignore-glob=tests/functional/test_default_selectors.py
    --ignore-glob=tests/functional/test_external_reference.py
    --ignore-glob=tests/functional/test_multiple_indexes.py
    --ignore-glob=tests/functional/test_ref_override.py
    --ignore-glob=tests/functional/test_relation_name.py
    --ignore-glob=tests/functional/test_severity.py
    --ignore-glob=tests/functional/test_timezones.py
    --ignore-glob=tests/functional/unit_testing/*
"""
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
markers = [
]
minversion = "2.0"
testpaths = [
    "tests/functional",
    "tests/unit",
]
xfail_strict = true
